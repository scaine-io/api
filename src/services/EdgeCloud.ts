import { CreateInfer, EdgeCloudResponse, ErrorStatus, InterRequestResponseBody, PresignedResponseBody } from '@scaine-io/types'

export class EdgeCloudClient {
	private apiToken: string
	private baseUrl = 'https://ondemand.thetaedgecloud.com'
	private model = 'image_to_image'
	private action = 'background_removal'

	constructor(apiToken: string) {
		this.apiToken = apiToken
	}

	// step 1 (optional) to get a url to upload the image data
	async createInputPresignedUrls(): Promise<PresignedResponseBody> {
		const url = `${this.baseUrl}/infer_request/${this.model}/${this.action}/input_presigned_urls`
		const response = await fetch(url, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				Authorization: `Bearer ${this.apiToken}`,
			},
		})
		const json = await response.json()
		if (json.status !== 'success') throw new Error(`Failed to create presigned URLs ${(json.status as ErrorStatus).message}`)
		return json.body as PresignedResponseBody
	}

	// step 2 (optional) if you did step 1. This step uploads the image data with a presigned URL
	async uploadFileToThetaEdgeCloud(presignedUrl: string, data: Buffer) {
		const response = await fetch(presignedUrl, {
			method: 'PUT',
			headers: {
				'Content-Type': 'application/octet-stream',
			},
			body: new Uint8Array(data),
		})
		if (response.status !== 200) throw new Error(`Failed to upload file to Theta Edge Cloud: ${response.status} ${response.statusText}`)
	}

	// step 3 or step 1 if you want to upload directly for a webpage
	// webhook can be a task creation function which create a new task queue
	async createInferRequest(imgUrl: string): Promise<InterRequestResponseBody> {
		const url = `${this.baseUrl}/infer_request/${this.model}/${this.action}`
		const body: CreateInfer = {
			input: {
				image_filename: imgUrl, // It could either be an image filename generated by the preSignedUrl API or an image URL.
			},
		}

		// if (wait !== undefined) body.wait = wait
		// if (webhook) body.webhook = webhook
		const response = await fetch(url, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				Authorization: `Bearer ${this.apiToken}`,
			},
			body: JSON.stringify(body),
		})

		const json = (await response.json()) as EdgeCloudResponse
		if (json.status !== 'success') throw new Error(`Failed to create infer request '${response.statusText}' ${(json.status as ErrorStatus).message}`)

		return json.body as InterRequestResponseBody
	}

	// step 4 can be used for GUI updates has to call for example every 3 seconds
	async getInferRequest(requestId: string): Promise<InterRequestResponseBody> {
		const url = `${this.baseUrl}/infer_request/${requestId}`
		const response = await fetch(url, {
			method: 'GET',
			headers: {
				'Content-Type': 'application/json',
				Authorization: `Bearer ${this.apiToken}`,
			},
		})
		const json = await response.json()
		if (json.status !== 'success') throw new Error(`Failed to get infer request '${response.statusText}' ${(json.status as ErrorStatus).message}`)

		return json.body as InterRequestResponseBody
	}
}
